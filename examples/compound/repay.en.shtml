<script type="text/javascript"><![CDATA[
class Token {

    constructor(tokenInstance) {
        this.props = tokenInstance;
    }

    render() {
        const decimals8 = 100000000; //cToken decimals
        let cTokenBalance = (this.props.cTokenBalance / decimals8).toFixed(2);
        let borrowBalance = (this.props.borrowBalanceWithInterest / decimals8).toFixed(2);
        let interestPayable = ((this.props.borrowBalanceWithInterest - this.props.borrowBalanceWithoutInterest) / decimals8).toFixed(2);
        return`
    <div id="border-container">
        <h2 class="ui header block">
        <bold>Repay ${this.props.name}</bold>
        </h2>
        <class="ui container">
          <div class="ui teal segment">
            <div class="ui grid">
              <div class="left floated six wide column">
                <h4>${this.props.name} Balance</h4>
              </div>
              <div class="right floated three wide column">
                <h4>${cTokenBalance}</h4>
              </div>
            </div>

            <div class="ui grid">
              <div class="left floated seven wide column">
                <h4>
                Borrow Balance
                </h4>
              </div>
              <div class="right floated three wide column">
                <h4>${borrowBalance}
                </h4>
              </div>
            </div>
          </div>
            <div class="ui grid">
              <div class="left floated nine wide column">
                <h4>
                Interest Payable
                </h4>
              </div>
              <div class="right floated three wide column">
                <h4>${interestPayable}
                </h4>
              </div>
            </div>

            <div class="ui grid">
              <div class="left floated nine wide column">
                <h4>
                Repay
                </h4>
              </div>
              <div class="right floated three wide column">
                <input id="repayAmount" type="number">
              </div>
            </div>
          </div>
    </div>
`;
    }
}

web3.tokens.dataChanged = (oldTokens, updatedTokens) => {
    const currentTokenInstance = web3.tokens.data.currentInstance;
    const domHtml = new Token(currentTokenInstance).render();
    document.getElementById('root').innerHTML = domHtml;
    if (currentTokenInstance.balance != null) {
        document.getElementById('cTokenBalance').innerHTML = currentTokenInstance.balance / 1e+18;
    }
};

]]></script>
<div id="root"></div>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE token  [
    <!ENTITY style SYSTEM "../erc20/shared.css">
    <!ENTITY compound.en SYSTEM "compound.en.shtml">
    ]>
<ts:token xmlns:ts="http://tokenscript.org/2019/05/tokenscript"
          xmlns="http://www.w3.org/1999/xhtml"
          xmlns:xml="http://www.w3.org/XML/1998/namespace"
          xsi:schemaLocation="http://tokenscript.org/2019/05/tokenscript ../../schema/tokenscript.xsd"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          custodian="false"
>
    <ts:name>
        <ts:string xml:lang="en">compound</ts:string>
    </ts:name>
    <ts:contract name="compound">
        <ts:address network="1">0x3FDA67f7583380E67ef93072294a7fAc882FD7E7</ts:address>
    </ts:contract>
    <ts:contract name="USDC" interface="erc20">
        <ts:address network="1">0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="compound">
        </ts:ethereum>
    </ts:origins>
    <ts:cards>
        <ts:token-card>
            <ts:view-iconified/>
            <ts:view>
            </ts:view>
        </ts:token-card>
        <ts:action>
            <ts:name>
                <ts:string xml:lang="en">Deposit USDC to Compound</ts:string>
            </ts:name>
            <ts:attribute-type id="amount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
                <ts:name>
                    <ts:string xml:lang="en">Amount in xcompound</ts:string>
                    <ts:string xml:lang="zh">代幣金額</ts:string>
                </ts:name>
                <ts:origins>
                    <!-- e18 is a hard coded multiplier.
                    rationale for hardcoding: avoiding over-design  -->
                    <ts:user-entry as="e18"/>
                </ts:origins>
            </ts:attribute-type>
            <ts:transaction>
                <ts:ethereum function="deposit" contract="compound">
                    <ts:data>
                        <!-- to deposit, drop USDC token into here -->
                        <ts:address>0x3FDA67f7583380E67ef93072294a7fAc882FD7E7</ts:address>
                        <ts:uint256 ref="amount"/>
                    </ts:data>
                </ts:ethereum>
            </ts:transaction>
            <ts:view>&compound.en;</ts:view>
        </ts:action>

        <ts:action>
            <ts:name>
                <ts:string xml:lang="en">Withdraw USDC from Compound</ts:string>
            </ts:name>
            <ts:attribute-type id="amount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
                <ts:name>
                    <ts:string xml:lang="en">Amount in compound</ts:string>
                    <ts:string xml:lang="zh">代幣金額</ts:string>
                </ts:name>
                <ts:origins>
                    <!-- e18 is a hard coded multiplier.
                    rationale for hardcoding: avoiding over-design  -->
                    <ts:user-entry as="e18"/>
                </ts:origins>
            </ts:attribute-type>
            <ts:transaction>
                <ts:ethereum function="withdraw" contract="compound">
                    <ts:data>
                        <!-- to deposit, drop USDC token into here -->
                        <ts:address>0x3FDA67f7583380E67ef93072294a7fAc882FD7E7</ts:address>
                        <ts:uint256 ref="amount"/>
                    </ts:data>
                </ts:ethereum>
            </ts:transaction>
            <ts:view>&compound.en;</ts:view>
        </ts:action>

    </ts:cards>
    <ts:attribute-types>
        <!-- gets a tuple of market info, can get amount of borrows (uint totalBorrows)
in the system for USDC, used to get APR -->
        <ts:attribute-type id="marketsInfo" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">marketsInfo</ts:string>
            </ts:name>
            <!-- returns: isSupported bool, blockNumber uint256, interestRateModel address,
             totalSupply uint256, supplyRateMantissa uint256, supplyIndex uint256,
              totalBorrows uint256, borrowRateMantissa uint256, borrowIndex uint256 -->
            <ts:origins>
                <ts:ethereum function="markets" contract="compound" as="tuple">
                    <ts:data>
                        <ts:address>0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <ts:attribute-type id="tokenBalance" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Balance</ts:string>
                <ts:string xml:lang="zh">餘額</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="balanceOf" contract="USDC" as="uint">
                    <ts:data>
                        <ts:address ref="ownerAddress"/>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- the current Annual interest rate on deposits -->
        <ts:attribute-type id="supplyInterestRate" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">supplyInterestRate</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="getSupplyRate" contract="compound" as="tuple">
                    <ts:data>
                        <ts:address>0x3FDA67f7583380E67ef93072294a7fAc882FD7E7</ts:address>
                        <ts:uint256 ref="cash"/>
                        <ts:uint256 ref="borrows"/>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- the current Annual interest rate on borrowing -->
        <ts:attribute-type id="borrowInterestRate" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">borrowRate</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="getBorrowRate" contract="compound" as="tuple">
                    <ts:data>
                        <ts:address>0x3FDA67f7583380E67ef93072294a7fAc882FD7E7</ts:address>
                        <ts:uint256 ref="cash"/>
                        <ts:uint256 ref="borrows"/>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- get the amount you supplied (without interest accrued) -->
        <ts:attribute-type id="supplyMapping" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Interest Earned</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="supplyBalances" contract="compound" as="uint">
                    <ts:data>
                        <ts:address ref="ownerAddress"/>
                        <ts:address>0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- get the amount you borrowed (without interest owed) -->
        <ts:attribute-type id="borrowMapping" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Interest Earned</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="borrowBalances" contract="compound" as="uint">
                    <ts:data>
                        <ts:address ref="ownerAddress"/>
                        <ts:address>0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- Interest earned equals getSupplyBalance (includes interest accrued) - supply balance mapping -->
        <ts:attribute-type id="supplyBalance" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Interest Earned</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="getSupplyBalance" contract="compound" as="uint">
                    <ts:data>
                        <ts:address>0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
                        <ts:address ref="ownerAddress"/>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- Interest payable equals getBorrowBalance(includes accrued interest)
         - how much you borrowed -->
        <ts:attribute-type id="borrowBalance" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Amount borrowed in USDC</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="getBorrowBalance" contract="compound" as="uint">
                    <ts:data>
                        <ts:address>0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
                        <ts:address ref="ownerAddress"/>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

        <!-- amount of cash in the system for USDC, used to get APR -->
        <ts:attribute-type id="cashAmount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">cashAmount</ts:string>
            </ts:name>
            <ts:origins>
                <ts:ethereum function="getCash" contract="compound" as="uint">
                    <ts:data>
                        <ts:address>0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</ts:address>
                    </ts:data>
                </ts:ethereum>
            </ts:origins>
        </ts:attribute-type>

    </ts:attribute-types>
</ts:token>

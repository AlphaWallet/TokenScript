<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE token  [
        <!ENTITY style SYSTEM "shared.css">
        <!ENTITY compound.en SYSTEM "compound.en.shtml">
        <!ENTITY borrow.en SYSTEM "borrow.en.shtml">
        <!ENTITY mint.en SYSTEM "mint.en.shtml">
        <!ENTITY redeem.en SYSTEM "redeem.en.shtml">
        <!ENTITY repay.en SYSTEM "repay.en.shtml">
        ]>
<ts:token xmlns:ts="http://tokenscript.org/2019/05/tokenscript"
          xmlns="http://www.w3.org/1999/xhtml"
          xmlns:xml="http://www.w3.org/XML/1998/namespace"
          xsi:schemaLocation="http://tokenscript.org/2019/05/tokenscript ../../schema/tokenscript.xsd"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          custodian="false"
>
<ts:name>
    <ts:string xml:lang="en">cToken DAI</ts:string>
</ts:name>
<ts:contract name="cTokenDAI" interface="erc20">
    <ts:address network="1">0xF5DCe57282A584D2746FaF1593d3121Fcac444dC</ts:address>
</ts:contract>
<ts:contract name="dai" interface="erc20">
    <ts:address network="1">0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359</ts:address>
</ts:contract>
<ts:origins>
    <ts:ethereum contract="cTokenDAI"/>
</ts:origins>

<ts:cards>
    <ts:token-card>
        <ts:view-iconified/>
        <ts:view>
        </ts:view>
    </ts:token-card>

    <ts:action>
        <ts:name>
            <ts:string xml:lang="en">Overview</ts:string>
        </ts:name>
        <style type="text/css">&style;</style>
        <ts:view xml:lang="en">&compound.en;</ts:view>
    </ts:action>

    <ts:action>
        <ts:name>
            <ts:string xml:lang="en">Borrow</ts:string>
        </ts:name>
        <ts:attribute-type id="borrowAmount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Amount to borrow</ts:string>
            </ts:name>
            <ts:origins>
                <!-- e18 is a hard coded multiplier.
                rationale for hardcoding: avoiding over-design  -->
                <ts:user-entry as="e18"/>
            </ts:origins>
        </ts:attribute-type>
        <ts:transaction>
            <ts:ethereum function="borrow" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:uint256 ref="borrowAmount"/>
                </ts:data>
            </ts:ethereum>
        </ts:transaction>
        <style type="text/css">&style;</style>
        <ts:view xml:lang="en">&borrow.en;</ts:view>
    </ts:action>

    <ts:action>
        <ts:name>
            <ts:string xml:lang="en">Repay</ts:string>
        </ts:name>
        <ts:attribute-type id="repayAmount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Amount to borrow</ts:string>
            </ts:name>
            <ts:origins>
                <!-- e18 is a hard coded multiplier.
                rationale for hardcoding: avoiding over-design  -->
                <ts:user-entry as="e18"/>
            </ts:origins>
        </ts:attribute-type>
        <ts:transaction>
            <ts:ethereum function="repayBorrow" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:uint256 ref="repayAmount"/>
                </ts:data>
            </ts:ethereum>
        </ts:transaction>
        <style type="text/css">&style;</style>
        <ts:view xml:lang="en">&repay.en;</ts:view>
    </ts:action>

    <ts:action>
        <ts:name>
            <ts:string xml:lang="en">Mint</ts:string>
        </ts:name>
        <ts:attribute-type id="mintAmount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Amount to mint</ts:string>
            </ts:name>
            <ts:origins>
                <!-- e18 is a hard coded multiplier.
                rationale for hardcoding: avoiding over-design  -->
                <ts:user-entry as="e18"/>
            </ts:origins>
        </ts:attribute-type>
        <ts:transaction>
            <ts:ethereum function="mint" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:uint256 ref="mintAmount"/>
                </ts:data>
            </ts:ethereum>
        </ts:transaction>
        <style type="text/css">&style;</style>
        <ts:view xml:lang="en">&mint.en;</ts:view>
    </ts:action>

    <ts:action>
        <ts:name>
            <ts:string xml:lang="en">Redeem</ts:string>
        </ts:name>
        <ts:attribute-type id="redeemAmount" syntax="1.3.6.1.4.1.1466.115.121.1.36">
            <ts:name>
                <ts:string xml:lang="en">Amount to redeem</ts:string>
            </ts:name>
            <ts:origins>
                <!-- e18 is a hard coded multiplier.
                rationale for hardcoding: avoiding over-design  -->
                <ts:user-entry as="e18"/>
            </ts:origins>
        </ts:attribute-type>
        <ts:transaction>
            <ts:ethereum function="redeem" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:uint256 ref="redeemTokens"/>
                </ts:data>
            </ts:ethereum>
        </ts:transaction>
        <style type="text/css">&style;</style>
        <ts:view xml:lang="en">&redeem.en;</ts:view>
    </ts:action>

</ts:cards>

<ts:attribute-types>

    <!-- your balance in DAI (not compound dai) -->
    <ts:attribute-type id="tokenBalance" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Balance</ts:string>
            <ts:string xml:lang="zh">餘額</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="balanceOf" contract="dai" as="uint">
                <ts:data>
                    <ts:address ref="ownerAddress"/>
                </ts:data>
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

    <!-- your balance in cDAI, this is essentially the amount supplied -->
    <ts:attribute-type id="cTokenBalance" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Balance</ts:string>
            <ts:string xml:lang="zh">餘額</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="balanceOf" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:address ref="ownerAddress"/>
                </ts:data>
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

    <!-- TODO make sure interest accrued is actually included here -->
    <!-- your balance in cDAI, this is essentially the amount supplied with interest -->
    <ts:attribute-type id="cTokenBalanceWithInterest" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Balance</ts:string>
            <ts:string xml:lang="zh">餘額</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="balanceOfUnderlying" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:address ref="ownerAddress"/>
                </ts:data>
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

    <!-- the current Annual interest rate on supply deposits -->
    <ts:attribute-type id="supplyInterestRate" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Supply Interest Rate</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="supplyRatePerBlock" contract="cTokenDAI" as="uint">
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

    <!-- the current Annual interest rate on borrowing -->
    <ts:attribute-type id="borrowInterestRate" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Supply Interest Rate</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="borrowRatePerBlock" contract="cTokenDAI" as="uint">
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

    <!-- get the amount you borrowed (with interest owed) -->
    <ts:attribute-type id="borrowBalanceWithInterest" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Total amount borrowed</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="borrowBalanceCurrent" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:address ref="ownerAddress"/>
                </ts:data>
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

    <!-- get the amount you borrowed (without interest owed) -->
    <ts:attribute-type id="borrowBalanceWithoutInterest" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
            <ts:string xml:lang="en">Borrow balance without interest accrued</ts:string>
        </ts:name>
        <ts:origins>
            <ts:ethereum function="borrowBalanceStored" contract="cTokenDAI" as="uint">
                <ts:data>
                    <ts:address ref="ownerAddress"/>
                </ts:data>
            </ts:ethereum>
        </ts:origins>
    </ts:attribute-type>

</ts:attribute-types>
</ts:token>
